AWSTemplateFormatVersion: 2010-09-09


Resources:
  # VPC 
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.100.0.0/16
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
  
  #InternetGAteway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-IG" ]]
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  # Public Subnet 1
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list        
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PublicSubnet-A
  
  # Public Subnet 2
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PublicSubnet-B
  
  # Private Subnet 1
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.3.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PrivateSubnet-A
  
  # Private Subnet 2
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.4.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PrivateSubnet-B
  
  # Public RouteTable
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PublicRouteTable
  
  # Route to IGW
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway


  # Elastic IP Address
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  # A NAT Gateway: 
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
      - Key: Name
        Value: !Sub NAT-${AWS::StackName}
  
  # Here is a private route table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PrivateRouteTable
  PrivateRoute1:            # Private route 
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGateway
  
  # Attach the public subnets to public route tables, 
  # and attach the private subnets to private route tables:    
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
  
  #------------------- RDS Resources ----------------------------
  # EC2 Security Group for DB Access
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      GroupDescription: EC2 Database access
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      Tags: 
      - Key: Name
        Value: !Sub ${AWS::StackName}-ec2-SG
  # DB Security Group 
  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    DependsOn: VPC
    Properties:
      EC2VpcId: !Ref VPC
      DBSecurityGroupIngress:
        EC2SecurityGroupId: !Ref EC2SecurityGroup
      GroupDescription: DB Security Group
      Tags: 
      - Key: Name
        Value: !Sub ${AWS::StackName}-DB-SG

  #Master DB
  MasterDB:
    Type: AWS::RDS::DBInstance
    DependsOn: DBSecurityGroup
    Properties:
      DBName: competitionDB
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: MySQL
      MasterUsername: dbuser
      MasterUserPassword: nopassword
      MultiAZ: false
      Tags:
      - Key: Name
        Value: Competition Database
      #VPCSecurityGroups:
      #- !Ref DBSecurityGroup

  #------------------------------------------EC2 Instance

  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: EC2SecurityGroup
    Properties:
      InstanceType: t3.micro
      ImageId: ami-04581fbf744a7d11f
      Tags: 
      - Key: Name
        Value: !Sub ${AWS::StackName}-ec2

  
 
 
  